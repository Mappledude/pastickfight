name: Firebase Hosting (live + preflight-file)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # A) Write a preflight script to disk (avoids inline-quote/log mangling)
      - name: Write preflight script
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/preflight.js <<'JS'
          (() => {
            const s = process.env.SA_JSON;
            if (!s) {
              console.error("::error::Missing secret FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT");
              process.exit(1);
            }
            let j;
            try { j = JSON.parse(s); }
            catch (e) {
              console.error("::error::Secret is not valid JSON: " + e.message);
              process.exit(1);
            }
            const pid = j.project_id || "";
            const email = j.client_email || "";
            const domain = email.includes("@") ? email.split("@")[1] : "";
            console.log(`project_id=${pid}`);
            console.log(`client_email_domain=${domain}`);
            if (pid !== "pastickfight-472521") {
              console.error("::error::Secret project_id must be 'pastickfight-472521'");
              process.exit(1);
            }
          })();
          JS

      - name: Preflight — secret sanity
        env:
          SA_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT }}
        run: node .github/scripts/preflight.js

      # B) Permission probe using the SA as ADC (no prompts)
      - name: Preflight — permission probe
        shell: bash
        env:
          SA_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT }}
        run: |
          set -euo pipefail
          echo "$SA_JSON" > "$RUNNER_TEMP/sa.json"
          export GOOGLE_APPLICATION_CREDENTIALS="$RUNNER_TEMP/sa.json"
          npx --yes firebase-tools@latest --non-interactive projects:list --project pastickfight-472521 1>/dev/null
          npx --yes firebase-tools@latest --non-interactive hosting:sites:list --project pastickfight-472521 1>/dev/null
          echo "✅ Permission probe passed."

      # C) Deploy live (no repoToken => no Checks API)
      - name: Deploy to Firebase Hosting (live)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT }}
          projectId: pastickfight-472521
          channelId: live

      # D) Verify live pages
      - name: Verify live pages
        shell: bash
        run: |
          set -euo pipefail
          base="https://pastickfight-472521.web.app"

          check() {
            url="$1"
            expected="$2"
            echo "Checking $url for: $expected"
            html="$(curl -fsSL --retry 4 --retry-connrefused --max-time 20 "$url")" || {
              echo "::error::Failed to fetch $url"
              exit 1
            }
            grep -q "$expected" <<<"$html" || {
              echo "::error::Expected '$expected' not found at $url"
              echo "First 200 chars of response:"
              echo "$html" | head -c 200; echo
              exit 1
            }
          }

          check "${base}/" "Main Page"
          check "${base}/lobby" "Lobby Page"
          check "${base}/admin" "Admin — Players"

          echo "✅ Verified all pages."
