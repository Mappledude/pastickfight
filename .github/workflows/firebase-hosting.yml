name: Firebase Hosting (live + verify)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Preflight: print safe fields from the secret to ensure it belongs to this project
      - name: Secret preflight (safe fields)
        env:
          SA_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT }}
        run: |
          node -e '(() => {
            if (!process.env.SA_JSON) { console.error("::error::Missing secret FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT"); process.exit(1); }
            let j; try { j = JSON.parse(process.env.SA_JSON); } catch { console.error("::error::Secret is not valid JSON"); process.exit(1); }
            console.log(`project_id=${j.project_id}`); 
            console.log(`client_email_domain=${(j.client_email||"").split("@")[1]||""});
            if (j.project_id !== "pastickfight-472521") { console.error("::error::Secret project_id must be pastickfight-472521"); process.exit(1); }
          })()'

      - name: Deploy to Firebase Hosting (live)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PASTICKFIGHT }}
          projectId: pastickfight-472521
          channelId: live

      - name: Verify live pages
        run: |
          set -euo pipefail
          base="https://pastickfight-472521.web.app"
          declare -A pages=( [""]='Main Page' ["lobby"]='Lobby Page' ["admin"]='Admin Page' )
          for p in "${!pages[@]}"; do
            url="${base}/${p}"
            exp="${pages[$p]}"
            echo "Checking $url contains: $exp"
            html="$(curl -fsSL --retry 4 --retry-connrefused --max-time 20 "$url")"
            echo "$html" | grep -q "$exp" || { echo "::error::Expected '$exp' not found at $url"; exit 1; }
          done
          echo "âœ… Verified all pages."
